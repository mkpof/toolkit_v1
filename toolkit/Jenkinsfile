#!groovy
//env.TOOLKIT_VER = "1.0-ks8"
//********* deplacara variables*************//
env.ORGA = "mkpof"
env.GIT_CRED = "GitHubPusher"
env.GIT_BASE_URL = "https://github.com"
env.GIT_API_BASE = "https://api.github.com"

env.GIT_DEVOPS_URL = "${env.GIT_BASE_URL}/${env.ORGA}/devops.git"
//******* Fin Declaracion Variable *****//
//
//***** Carga SharedLibs *****//
library(
    changelog: false,
    identifier: 'mkpof@master',
    retriever: modernSCM(
        [
            $class: 'GitSCMSource',
            credentialsId: 'GitHubPusher',
            remote: "${env.GIT_BASE_URL}/mkpof/toolkit_v1",
            traits: [
                [ $class: 'jenkins.plugins.git.traits.BranchDiscoveryTrait' ],
                [ $class: 'CleanAfterCheckoutTrait' ]
            ]
        ])
)

node () {
    stage("Carga üïõ") {
        // Detecto si se esta ejecutando un "Replay"
        currentBuild.getBuildCauses().each { cause ->
            if( cause._class == 'org.jenkinsci.plugins.workflow.cps.replay.ReplayCause') {
                mhUtilidades.Messages('"Replay" deshabilitado, por favor vuelva a iniciar el pipeline con el bot√≥n ‚ñ∂Ô∏è RUN.', 'error')
                currentBuild.displayName = "‚õî"
                currentBuild.description = '"Replay" deshabilitado, por favor vuelva a iniciar el pipeline con el bot√≥n ‚ñ∂Ô∏è RUN.'
                sh "exit 1"
            }
            if( cause._class == 'org.jenkinsci.plugins.pipeline.modeldefinition.causes.RestartDeclarativePipelineCause') {
                mhUtilidades.Messages('"Restart" deshabilitado, por favor vuelva a iniciar el pipeline con el bot√≥n ‚ñ∂Ô∏è RUN.', 'error')
                currentBuild.displayName = "‚õî"
                currentBuild.description = '"Restart" deshabilitado, por favor vuelva a iniciar el pipeline con el bot√≥n ‚ñ∂Ô∏è RUN.'
                sh "exit 1"
            }
        }

        mhUtilidades.CleanWorkspace()

        mhUtilidades.CurrentDate() 
        env.STARTDATE = env.tdatealm
        //mhUtilidades.CurrentDate()
        //timeout(time: 4, unit: 'MINUTES') {
        mhUserInputs.inputAppName()
        //}

        mhUtilidades.Messages("Mensaje en el stage de carga", 'success')
        mhDebug.printEnvVars()
    }
}





//    stage("Validaciones ‚úîÔ∏è) {
//        env.PROYECTO_K8S = "${env.ORGA}-${env.DEPLOY_ENV}"
//        env.PROYECTO = env.ORGA
//        if ( env.APP_NAME ) {
//            env.GIT_APP_URL = "${env.GIT_BASE_URL/${env.ORGA}/${env.APP_NAME}.git"
//
//        }
//        mhUtilidades.Messages("Mensaje en el stage de Validaciones", 'success')

//    }
//}

